##
## Generated by details-generator. Do not edit!
##

require 'interface/order/details/common'
require 'expression'

class DetailsForProgramSwitchingOrder
	extend DetailsCommon

	CONDITIONS = [
		DetailsCommon::Condition.new('became_disabled', {"eval"=>" |attrs|\n\t\t\tattrs['order']['group_id'] and Group.load(attrs['order']['group_id']).faculty.name == \"\\365\\343\"\n\t\t"}),
		DetailsCommon::Condition.new('profession_switching', {"order:profession_code"=>/./}),
		DetailsCommon::Condition.new('contract', {"study_type_id"=>Classifier::StudyType::CONTRACT}),
		DetailsCommon::Condition.new('foreign', {"citizenship_id"=>[4, 5, 6, 7]}),
		DetailsCommon::Condition.new('disabled', {"category"=>:disabled})
	]

	def self.has_order?
		false
	end

	def self.has_student?(paragraph)
		[0].member? paragraph
	end
	
	def self.init_student(o, eid, paragraph)
		attributes = o.get_student_attributes(eid)
		case paragraph
		when 0
		end
		o.set_student_attributes(eid, attributes)
	end
	
	def self.fix_student(o, eid, paragraph, attributes)
		attributes = attributes.dup
		case paragraph
		when 0
			attributes['group_id'] ||= Proc.new { Student.load(eid).group.oid }.call.to_i
			attributes['profession_code'] ||= Proc.new { nil }.call
			attributes['card_number'] ||= Proc.new { Student.load(eid).card_number }.call
			attributes['specialization_code'] ||= Proc.new { '00' }.call
			attributes['degree_code'] ||= Proc.new { nil }.call
			attributes['study_form_id'] ||= Proc.new { Student.load(eid).study_form_id }.call
			attributes['basics'] ||= Proc.new { 'личное заявление обучающегося с визой декана факультета и резолюцией ректора' }.call
		end
		attributes
	end
	
	def self.render_student(o, eid, paragraph, tmpl)
		attributes = fix_student(o, eid, paragraph, o.get_student_attributes(eid))
		case paragraph
		when 0
			tmpl.group_id = attributes['group_id']
			tmpl.profession_code = attributes['profession_code']
			tmpl.card_number = attributes['card_number']
			tmpl.specialization_code = attributes['specialization_code']
			tmpl.degree_code = attributes['degree_code']
			tmpl.study_form_id = attributes['study_form_id']
			tmpl.additional_agreement = attributes['additional_agreement']
			tmpl.basic_agreement = attributes['basic_agreement']
			tmpl.start_at = attributes['start_at']
			tmpl.requalification = attributes['requalification']
			tmpl.liabilities = attributes['liabilities']
			tmpl.deadline = attributes['deadline']
			tmpl.addendum = attributes['addendum']
			tmpl.contract = attributes['contract']
			tmpl.basics = attributes['basics']
			tmpl.note = attributes['note']
		end
	end
	
	def self.save_student(o, eid, paragraph, params)
		attributes = o.get_student_attributes(eid)
		case paragraph
		when 0
			attributes['group_id'] = params["group_id"].to_i
			attributes['profession_code'] = params["profession_code_code"]
			attributes['profession_code'] = nil if attributes['profession_code'] == 0
			attributes['card_number'] = params["card_number"]
			attributes['specialization_code'] = params["specialization_code"]
			attributes['degree_code'] = params["degree_code_code"]
			attributes['degree_code'] = nil if attributes['degree_code'] == 0
			attributes['study_form_id'] = params["study_form_id_id"].to_s.split(':')[0].to_i
			attributes['additional_agreement'] = Document.new(params["additional_agreement_date"].to_d, params["additional_agreement_num"])
			attributes['basic_agreement'] = Document.new(params["basic_agreement_date"].to_d, params["basic_agreement_num"])
			attributes['start_at'] = params["start_at"].to_d
			collect_row = Proc.new { |index|
				row = {}
				row['subject'] = params["requalification_subject_#{index}"]
				row['mark'] = params["requalification_mark_#{index}"]
				row
			}
			attributes['requalification'] = []
			i = 0
			while (keep = params["keep_requalification_#{i}"])
				attributes['requalification'] << collect_row.call(i) if keep == '1'
				i += 1
			end
			attributes['requalification'] << collect_row.call('new') if params['keep_requalification_new'] == '1'
			collect_row = Proc.new { |index|
				row = {}
				row['subject'] = params["liabilities_subject_#{index}"]
				row['type'] = params["liabilities_type_#{index}"]
				row
			}
			attributes['liabilities'] = []
			i = 0
			while (keep = params["keep_liabilities_#{i}"])
				attributes['liabilities'] << collect_row.call(i) if keep == '1'
				i += 1
			end
			attributes['liabilities'] << collect_row.call('new') if params['keep_liabilities_new'] == '1'
			attributes['deadline'] = params["deadline"].to_d
			attributes['addendum'] = Document.new(params["addendum_date"].to_d, params["addendum_num"])
			attributes['contract'] = Document.new(params["contract_date"].to_d, params["contract_num"])
			attributes['basics'] = params["basics"]
			attributes['note'] = params["note"]
		end
		o.set_student_attributes(eid, attributes)
	end

	def self.has_group?(paragraph)
		[].member? paragraph
	end
end
