##
## Generated by details-generator. Do not edit!
##

require 'interface/order/details/common'
require 'expression'

class DetailsForGroupCreationOrder
	extend DetailsCommon

	CONDITIONS = [
		DetailsCommon::Condition.new('contract', {"study_type_id"=>Classifier::StudyType::CONTRACT}),
		DetailsCommon::Condition.new('foreign', {"citizenship_id"=>[4, 5, 6, 7]}),
		DetailsCommon::Condition.new('disabled', {"category"=>:disabled})
	]

	def self.has_order?
		true
	end

	def self.init_order(o)
		attributes = o.attributes.dup
		attributes['hide_study_type'] = 1
		attributes.each_pair { |k,v| o.attributes[k] = v }
		o.save
	end

	def self.fix_order(o)
		attributes = o.attributes.dup
		attributes
	end

	def self.render_order(o, tmpl)
		attributes = fix_order(o)
		tmpl.groups = attributes['groups']
	end

	def self.save_order(o, params)
		attributes = o.attributes.dup
		collect_row = Proc.new { |index|
			row = {}
			row['name'] = params["groups_name_#{index}"]
			row
		}
		attributes['groups'] = []
		i = 0
		while (keep = params["keep_groups_#{i}"])
			attributes['groups'] << collect_row.call(i) if keep == '1'
			i += 1
		end
		attributes['groups'] << collect_row.call('new') if params['keep_groups_new'] == '1'
		attributes.each_pair { |k,v| o.attributes[k] = v }
		o.save
	end

	def self.has_student?(paragraph)
		[].member? paragraph
	end

	def self.has_group?(paragraph)
		[].member? paragraph
	end
end
