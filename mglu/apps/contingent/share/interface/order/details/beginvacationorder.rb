##
## Generated by details-generator. Do not edit!
##

require 'interface/order/details/common'
require 'expression'

class DetailsForBeginVacationOrder
	extend DetailsCommon

	CONDITIONS = [
		DetailsCommon::Condition.new('pregnancy', {"reason"=>5}),
		DetailsCommon::Condition.new('baby_minding', {"reason"=>[2, 3]}),
		DetailsCommon::Condition.new('contract', {"study_type_id"=>Classifier::StudyType::CONTRACT}),
		DetailsCommon::Condition.new('foreign', {"citizenship_id"=>[4, 5, 6, 7]}),
		DetailsCommon::Condition.new('disabled', {"category"=>:disabled})
	]

	def self.has_order?
		true
	end

	def self.init_order(o)
		attributes = o.attributes.dup
		attributes['student_state_id'] = Proc.new { Classifier::StudentState::VACATION }.call.to_i
		attributes.each_pair { |k,v| o.attributes[k] = v }
		o.save
	end

	def self.fix_order(o)
		attributes = o.attributes.dup
		attributes
	end

	def self.render_order(o, tmpl)
		attributes = fix_order(o)
	end

	def self.save_order(o, params)
		attributes = o.attributes.dup
		attributes.each_pair { |k,v| o.attributes[k] = v }
		o.save
	end

	def self.has_student?(paragraph)
		[0].member? paragraph
	end
	
	def self.init_student(o, eid, paragraph)
		attributes = o.get_student_attributes(eid)
		case paragraph
		when 0
		end
		o.set_student_attributes(eid, attributes)
	end
	
	def self.fix_student(o, eid, paragraph, attributes)
		attributes = attributes.dup
		case paragraph
		when 0
			attributes['reason'] ||= 0
			attributes['country_id'] ||= Proc.new { first_value(Classifier::Country) }.call
		end
		attributes
	end
	
	def self.render_student(o, eid, paragraph, tmpl)
		attributes = fix_student(o, eid, paragraph, o.get_student_attributes(eid))
		case paragraph
		when 0
			tmpl.vacation = attributes['vacation']
			tmpl.reason = attributes['reason']
			case attributes['reason']
			when '0'.to_i
				tmpl.resolution = attributes['resolution']
			end
			tmpl.agreement = attributes['agreement']
			tmpl.country_id = attributes['country_id']
			tmpl.addendum = attributes['addendum']
			tmpl.contract = attributes['contract']
		end
	end
	
	def self.save_student(o, eid, paragraph, params)
		attributes = o.get_student_attributes(eid)
		case paragraph
		when 0
			attributes['vacation'] = DateRange.new(params["vacation_from"].to_d, params["vacation_till"].to_d)
			attributes['reason'] = params["reason"].to_i
			attributes['resolution'] = nil
			case attributes['reason']
			when '0'.to_i
				attributes['resolution'] = Document.new(params["resolution_date"].to_d, params["resolution_num"])
			end
			attributes['agreement'] = Document.new(params["agreement_date"].to_d, params["agreement_num"])
			attributes['country_id'] = params["country_id_id"].to_s.split(':')[0].to_i
			attributes['addendum'] = Document.new(params["addendum_date"].to_d, params["addendum_num"])
			attributes['contract'] = Document.new(params["contract_date"].to_d, params["contract_num"])
		end
		o.set_student_attributes(eid, attributes)
	end

	def self.has_group?(paragraph)
		[].member? paragraph
	end
end
