##
## Generated by details-generator. Do not edit!
##

require 'interface/order/details/common'
require 'expression'

class DetailsForBeginTraineeOrder
	extend DetailsCommon

	CONDITIONS = [
		DetailsCommon::Condition.new('contract', {"study_type_id"=>Classifier::StudyType::CONTRACT}),
		DetailsCommon::Condition.new('foreign', {"citizenship_id"=>[4, 5, 6, 7]}),
		DetailsCommon::Condition.new('disabled', {"category"=>:disabled})
	]

	def self.has_order?
		true
	end

	def self.init_order(o)
		attributes = o.attributes.dup
		attributes['student_state_id'] = Proc.new { Classifier::StudentState::TRAINEE }.call.to_i
		attributes.each_pair { |k,v| o.attributes[k] = v }
		o.save
	end

	def self.fix_order(o)
		attributes = o.attributes.dup
		attributes['country_id'] ||= Proc.new { first_value(Classifier::Country) }.call
		attributes['save_scholarship'] ||= 1
		attributes['teaching_paying_party'] ||= Proc.new { '' }.call
		attributes['habitation_paying_party'] ||= Proc.new { '' }.call
		attributes['nutrition_paying_party'] ||= Proc.new { '' }.call
		attributes
	end

	def self.render_order(o, tmpl)
		attributes = fix_order(o)
		tmpl.country_id = attributes['country_id']
		tmpl.city = attributes['city']
		tmpl.university = attributes['university']
		tmpl.save_scholarship = attributes['save_scholarship']
		tmpl.teaching_paying_party = attributes['teaching_paying_party']
		tmpl.habitation_paying_party = attributes['habitation_paying_party']
		tmpl.nutrition_paying_party = attributes['nutrition_paying_party']
	end

	def self.save_order(o, params)
		attributes = o.attributes.dup
		attributes['country_id'] = params["country_id_id"].to_s.split(':')[0].to_i
		attributes['city'] = params["city"]
		attributes['university'] = params["university"]
		attributes['save_scholarship'] = params["save_scholarship"].to_i
		attributes['teaching_paying_party'] = params["teaching_paying_party"]
		attributes['habitation_paying_party'] = params["habitation_paying_party"]
		attributes['nutrition_paying_party'] = params["nutrition_paying_party"]
		attributes.each_pair { |k,v| o.attributes[k] = v }
		o.save
	end

	def self.has_student?(paragraph)
		[0].member? paragraph
	end
	
	def self.init_student(o, eid, paragraph)
		attributes = o.get_student_attributes(eid)
		case paragraph
		when 0
		end
		o.set_student_attributes(eid, attributes)
	end
	
	def self.fix_student(o, eid, paragraph, attributes)
		attributes = attributes.dup
		case paragraph
		when 0
		end
		attributes
	end
	
	def self.render_student(o, eid, paragraph, tmpl)
		attributes = fix_student(o, eid, paragraph, o.get_student_attributes(eid))
		case paragraph
		when 0
			tmpl.trainee_range = attributes['trainee_range']
		end
	end
	
	def self.save_student(o, eid, paragraph, params)
		attributes = o.get_student_attributes(eid)
		case paragraph
		when 0
			attributes['trainee_range'] = DateRange.new(params["trainee_range_from"].to_d, params["trainee_range_till"].to_d)
		end
		o.set_student_attributes(eid, attributes)
	end

	def self.has_group?(paragraph)
		[].member? paragraph
	end
end
