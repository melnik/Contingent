##
## Generated by details-generator. Do not edit!
##

require 'interface/order/details/common'
require 'expression'

class DetailsForExpelationOrder
	extend DetailsCommon

	CONDITIONS = [
		DetailsCommon::Condition.new('rules_violation', {"order:reason"=>[3, 13]}),
		DetailsCommon::Condition.new('dead', {"order:reason"=>10}),
		DetailsCommon::Condition.new('contract', {"study_type_id"=>Classifier::StudyType::CONTRACT}),
		DetailsCommon::Condition.new('foreign', {"citizenship_id"=>[4, 5, 6, 7]}),
		DetailsCommon::Condition.new('disabled', {"category"=>:disabled})
	]

	def self.has_order?
		true
	end

	def self.init_order(o)
		attributes = o.attributes.dup
		attributes['student_state_id'] = Proc.new { Classifier::StudentState::EXPELLED }.call.to_i
		attributes['hide_citizenship'] = 1
		attributes.each_pair { |k,v| o.attributes[k] = v }
		o.save
	end

	def self.fix_order(o)
		attributes = o.attributes.dup
		attributes
	end

	def self.render_order(o, tmpl)
		attributes = fix_order(o)
	end

	def self.save_order(o, params)
		attributes = o.attributes.dup
		attributes.each_pair { |k,v| o.attributes[k] = v }
		o.save
	end

	def self.has_student?(paragraph)
		[0].member? paragraph
	end
	
	def self.init_student(o, eid, paragraph)
		attributes = o.get_student_attributes(eid)
		case paragraph
		when 0
			attributes['group_id'] = Proc.new { nil }.call.to_i
		end
		o.set_student_attributes(eid, attributes)
	end
	
	def self.fix_student(o, eid, paragraph, attributes)
		attributes = attributes.dup
		case paragraph
		when 0
			attributes['expelation_date'] ||= Proc.new { Time.now.strftime("%Y-%m-%d") }.call.to_d
			attributes['reason'] ||= 0
			attributes['basics2'] ||= 1
			attributes['term'] ||= Proc.new { Student.load(eid).group.term_number }.call.to_i
			attributes['year'] ||= Proc.new { Term.current.academic_year.begin.to_s + '/' + (Term.current.academic_year.end.to_s }.call
			attributes['country_id'] ||= Proc.new { first_value(Classifier::Country) }.call
		end
		attributes
	end
	
	def self.render_student(o, eid, paragraph, tmpl)
		attributes = fix_student(o, eid, paragraph, o.get_student_attributes(eid))
		case paragraph
		when 0
			tmpl.expelation_date = attributes['expelation_date']
			tmpl.reason = attributes['reason']
			case attributes['reason']
			when '0'.to_i
				tmpl.basics2 = attributes['basics2']
				tmpl.liabilities = attributes['liabilities']
				tmpl.term = attributes['term']
				tmpl.year = attributes['year']
			when '2'.to_i
				tmpl.dnsa = attributes['dnsa']
			when '3'.to_i
				tmpl.basics = attributes['basics']
			when '5'.to_i
				tmpl.resolution = attributes['resolution']
			when '9'.to_i
				tmpl.to = attributes['to']
			when '11'.to_i
				tmpl.statement = attributes['statement']
			when '12'.to_i
				tmpl.dnsa_1 = attributes['dnsa']
			when '13'.to_i
				tmpl.basics_1 = attributes['basics']
			when '14'.to_i
			end
			tmpl.agreement = attributes['agreement']
			tmpl.country_id = attributes['country_id']
			tmpl.assignment = attributes['assignment']
		end
	end
	
	def self.save_student(o, eid, paragraph, params)
		attributes = o.get_student_attributes(eid)
		case paragraph
		when 0
			attributes['expelation_date'] = params["expelation_date"].to_d
			attributes['reason'] = params["reason"].to_i
			attributes['basics2'] = nil
			attributes['liabilities'] = nil
			attributes['term'] = nil
			attributes['year'] = nil
			attributes['dnsa'] = nil
			attributes['basics'] = nil
			attributes['resolution'] = nil
			attributes['to'] = nil
			attributes['statement'] = nil
			case attributes['reason']
			when '0'.to_i
				attributes['basics2'] = params["basics2"].to_i
				collect_row = Proc.new { |index|
					row = {}
					row['subject'] = params["liabilities_subject_#{index}"]
					row['type'] = params["liabilities_type_#{index}"]
					row
				}
				attributes['liabilities'] = []
				i = 0
				while (keep = params["keep_liabilities_#{i}"])
					attributes['liabilities'] << collect_row.call(i) if keep == '1'
					i += 1
				end
				attributes['liabilities'] << collect_row.call('new') if params['keep_liabilities_new'] == '1'
				attributes['term'] = params["term"].to_i
				attributes['year'] = params["year"]
			when '2'.to_i
				attributes['dnsa'] = DateRange.new(params["dnsa_from"].to_d, params["dnsa_till"].to_d)
			when '3'.to_i
				attributes['basics'] = params["basics"]
			when '5'.to_i
				attributes['resolution'] = Document.new(params["resolution_date"].to_d, params["resolution_num"])
			when '9'.to_i
				attributes['to'] = params["to"]
			when '11'.to_i
				attributes['statement'] = Document.new(params["statement_date"].to_d, params["statement_num"])
			when '12'.to_i
				attributes['dnsa'] = DateRange.new(params["dnsa_1_from"].to_d, params["dnsa_1_till"].to_d)
			when '13'.to_i
				attributes['basics'] = params["basics_1"]
			when '14'.to_i
			end
			attributes['agreement'] = Document.new(params["agreement_date"].to_d, params["agreement_num"])
			attributes['country_id'] = params["country_id_id"].to_s.split(':')[0].to_i
			attributes['assignment'] = Document.new(params["assignment_date"].to_d, params["assignment_num"])
		end
		o.set_student_attributes(eid, attributes)
	end

	def self.has_group?(paragraph)
		[].member? paragraph
	end
end
