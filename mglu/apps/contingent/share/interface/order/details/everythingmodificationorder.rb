##
## Generated by details-generator. Do not edit!
##

require 'interface/order/details/common'
require 'expression'

class DetailsForEverythingModificationOrder
	extend DetailsCommon

	CONDITIONS = [
		DetailsCommon::Condition.new('contract', {"study_type_id"=>Classifier::StudyType::CONTRACT}),
		DetailsCommon::Condition.new('foreign', {"citizenship_id"=>[4, 5, 6, 7]}),
		DetailsCommon::Condition.new('disabled', {"category"=>:disabled})
	]

	def self.has_order?
		false
	end

	def self.has_student?(paragraph)
		[0].member? paragraph
	end
	
	def self.init_student(o, eid, paragraph)
		attributes = o.get_student_attributes(eid)
		case paragraph
		when 0
		end
		o.set_student_attributes(eid, attributes)
	end
	
	def self.fix_student(o, eid, paragraph, attributes)
		attributes = attributes.dup
		case paragraph
		when 0
			attributes['name'] ||= Proc.new { s = Student.load(eid); { 'last' => s.last_name, 'first' => s.first_name, 'father' => s.father_name } }.call
			attributes['gender_id'] ||= Proc.new { Student.load(eid).gender_id }.call
			attributes['card_number'] ||= Proc.new { Student.load(eid).card_number }.call
			attributes['group_id'] ||= Proc.new { Student.load(eid).group_id }.call.to_i
			attributes['citizenship_id'] ||= Proc.new { first_value(Classifier::Citizenship) }.call
			attributes['profession_code'] ||= Proc.new { first_value(Classifier::Profession) }.call
			attributes['degree_code'] ||= Proc.new { first_value(Classifier::Degree) }.call
		end
		attributes
	end
	
	def self.render_student(o, eid, paragraph, tmpl)
		attributes = fix_student(o, eid, paragraph, o.get_student_attributes(eid))
		case paragraph
		when 0
			tmpl.name = attributes['name']
			tmpl.name_basics = attributes['name_basics']
			tmpl.gender_id = attributes['gender_id']
			tmpl.gender_basics = attributes['gender_basics']
			tmpl.card_number = attributes['card_number']
			tmpl.card_number_basics = attributes['card_number_basics']
			tmpl.group_id = attributes['group_id']
			tmpl.group_basics = attributes['group_basics']
			tmpl.birth_date = attributes['birth_date']
			tmpl.birth_date_basics = attributes['birth_date_basics']
			tmpl.citizenship_id = attributes['citizenship_id']
			tmpl.citizenship_basics = attributes['citizenship_basics']
			tmpl.profession_code = attributes['profession_code']
			tmpl.profession_basics = attributes['profession_basics']
			tmpl.degree_code = attributes['degree_code']
			tmpl.degree_basics = attributes['degree_basics']
			tmpl.agreement = attributes['agreement']
			tmpl.agreement_basics = attributes['agreement_basics']
		end
	end
	
	def self.save_student(o, eid, paragraph, params)
		attributes = o.get_student_attributes(eid)
		case paragraph
		when 0
			attributes['name'] = {
				'first' => params["name_first"],
				'last' => params["name_last"],
				'father' => params["name_father"]
			}
			attributes['name_basics'] = params["name_basics"]
			attributes['gender_id'] = params["gender_id_id"].to_s.split(':')[0].to_i
			attributes['gender_basics'] = params["gender_basics"]
			attributes['card_number'] = params["card_number"]
			attributes['card_number_basics'] = params["card_number_basics"]
			attributes['group_id'] = params["group_id"].to_i
			attributes['group_basics'] = params["group_basics"]
			attributes['birth_date'] = params["birth_date"].to_d
			attributes['birth_date_basics'] = params["birth_date_basics"]
			attributes['citizenship_id'] = params["citizenship_id_id"].to_s.split(':')[0].to_i
			attributes['citizenship_basics'] = params["citizenship_basics"]
			attributes['profession_code'] = params["profession_code_code"]
			attributes['profession_basics'] = params["profession_basics"]
			attributes['degree_code'] = params["degree_code_code"]
			attributes['degree_basics'] = params["degree_basics"]
			attributes['agreement'] = Document.new(params["agreement_date"].to_d, params["agreement_num"])
			attributes['agreement_basics'] = params["agreement_basics"]
		end
		o.set_student_attributes(eid, attributes)
	end

	def self.has_group?(paragraph)
		[].member? paragraph
	end
end
