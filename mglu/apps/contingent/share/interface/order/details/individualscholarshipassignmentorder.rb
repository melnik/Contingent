##
## Generated by details-generator. Do not edit!
##

require 'interface/order/details/common'
require 'expression'

class DetailsForIndividualScholarshipAssignmentOrder
	extend DetailsCommon

	CONDITIONS = [
		DetailsCommon::Condition.new('grant', {"order:scholarship_id"=>13}),
		DetailsCommon::Condition.new('high_courses', {"course"=>[3, 4, 5, 6]}),
		DetailsCommon::Condition.new('contract', {"study_type_id"=>Classifier::StudyType::CONTRACT}),
		DetailsCommon::Condition.new('foreign', {"citizenship_id"=>[4, 5, 6, 7]}),
		DetailsCommon::Condition.new('disabled', {"category"=>:disabled})
	]

	def self.has_order?
		true
	end

	def self.init_order(o)
		attributes = o.attributes.dup
		attributes.each_pair { |k,v| o.attributes[k] = v }
		o.save
	end

	def self.fix_order(o)
		attributes = o.attributes.dup
		attributes['scholarship_id'] ||= Proc.new { first_value(Classifier::Scholarship) }.call
		attributes['year'] ||= Proc.new { (Date.today.year).to_s + '/' + (Date.today.year + 1).to_s }.call
		attributes
	end

	def self.render_order(o, tmpl)
		attributes = fix_order(o)
		tmpl.scholarship_id = attributes['scholarship_id']
		tmpl.custom_scholarship_id = attributes["custom_scholarship_id"]
		tmpl.year = attributes['year']
		tmpl.period = attributes['period']
		tmpl.basics = attributes['basics']
	end

	def self.save_order(o, params)
		attributes = o.attributes.dup
		attributes['scholarship_id'] = params["scholarship_id_id"].to_s.split(':')[0].to_i
		attributes['custom_scholarship_id'] = params["custom_scholarship_id"] if attributes['scholarship_id'] == 0
		attributes['year'] = params["year"]
		attributes['period'] = DateRange.new(params["period_from"].to_d, params["period_till"].to_d)
		attributes['basics'] = Document.new(params["basics_date"].to_d, params["basics_num"])
		attributes.each_pair { |k,v| o.attributes[k] = v }
		o.save
	end

	def self.has_student?(paragraph)
		[0].member? paragraph
	end
	
	def self.init_student(o, eid, paragraph)
		attributes = o.get_student_attributes(eid)
		case paragraph
		when 0
		end
		o.set_student_attributes(eid, attributes)
	end
	
	def self.fix_student(o, eid, paragraph, attributes)
		attributes = attributes.dup
		case paragraph
		when 0
		end
		attributes
	end
	
	def self.render_student(o, eid, paragraph, tmpl)
		attributes = fix_student(o, eid, paragraph, o.get_student_attributes(eid))
		case paragraph
		when 0
		end
	end
	
	def self.save_student(o, eid, paragraph, params)
		attributes = o.get_student_attributes(eid)
		case paragraph
		when 0
		end
		o.set_student_attributes(eid, attributes)
	end

	def self.has_group?(paragraph)
		[].member? paragraph
	end
end
