#!/usr/bin/env ruby

$LOAD_PATH.push '../../share'

module Generator
	def self.convert_condition(condition, container)
		cond = condition.dup
		while cond =~ /^(.*[^'A-Za-z0-9_]){0,1}([A-Za-z_][A-Za-z0-9_]*)([^'\[A-Za-z0-9_].*){0,1}$/
			cond[($1 || '').length, $2.length] = "\#['#{$2}']"
		end
		while cond =~ /(\#\['(.*?)'\])/
			cond[$1] = if %w( and or xor not ).member?($2) then $2 else "#{container}['#{$2}']" end
		end
		cond
	end
end

require 'cgi'
require '../../../../plugins/radical-core/extensions'
require 'extensions'
require 'data/classifier'
require 'expression'
require 'iconv'

def tr(str)
	Generator::Local2utf.iconv(str)
end

def utr(str)
	Generator::Utf2local.iconv(str)
end

module Generator
	SIGNATURE = 'Generated by details-generator. Do not edit!'

	CodePath = '../../share/interface/order/details'
	TemplatesPath = '../../tmpl/order/details'
	PrintVersionsPath = '../../tmpl/order/print_versions'
	DalPath = '../../share/data/order'

	Utf2local = Iconv.new('koi8-r', 'utf-8')
	Local2utf = Iconv.new('utf-8', 'koi8-r')

	class InputError < Exception; end
end

require 'stream'
require 'template'
require 'order'
require 'controls'
require 'print_version'
require 'variable'
require 'condition'
require 'print_version'

request = REXML::Document.new($stdin.read)
order = Generator::Order.new(request.root)

conditions = REXML::Document.new(File.read('conditions.xml'))
order.parse_conditions(conditions.root)

arg_index = 0
actions = []
params = [
	['-t', '--template',        :make_templates       ],
	['-c', '--background-code', :make_background_code ],
	['-p', '--print-version',   :make_print_version   ],
	['-d', '--dal',             :make_dal             ],
	['-n', '--nothing',         :check                ],
]

while ARGV[arg_index]
	params.each { |short, long, action|
		if ARGV[arg_index] == short || ARGV[arg_index] == long
			actions << action
		end
	}
	arg_index += 1
end
params.each { |short, long, action| actions << action } if actions.empty?
actions.compact!

begin
	actions.each { |action| order.send(action) }
rescue Iconv::IllegalSequence => e
	$stderr.puts "Error: #{e.class}\n\n#{e.failed[0..50]}\n\nat #{e.backtrace.join("\n")}"
	exit 1
end
