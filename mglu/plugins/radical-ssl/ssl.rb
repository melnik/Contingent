module Radical
   module SSL
      
      KeySize=768
      KeyFile="serv.key"
      CertFile="serv.cert"
      
      class << self
	 def key()
	    @@key
	 end
	 
	 def cert()
	    @@cert
	 end
      end
      
      include OpenSSL
      include PKey
      include X509
      
      begin
	 f=File.new(KeyFile)
	 print "Loading Server SSL key...\n"
	 @@key=RSA.new(f.read);
      rescue Exception => x
	 print "Generating #{KeySize} Server SSL key\n"
	 @@key=RSA.new(KeySize)
	 File.new(KeyFile,"w") << @@key.export
      end
      begin
	 f=File.new(CertFile)
	 print "Loading Server SSL certificate...\n"
	 @@cert=Certificate.new(f.read);
      rescue 
	 print "Generating certificate...\n"
	 c=Certificate.new
	 c.version=3
	 c.serial=0
	 name = X509::Name.new([["C","CZ"],["O","Ruby"],["CN","Test"]])
	 c.subject=name
	 c.issuer=name
	 c.not_before=Time.now
	 c.not_after=Time.now+(365*24*60)
	 c.public_key=@@key.public_key
	 ef = ExtensionFactory.new(nil,c)
	 c.extensions = [
	 ef.create_extension("basicConstraints","CA:FALSE"),
	 ef.create_extension("subjectKeyIdentifier", "hash")
	 ]
	 ef.issuer_certificate = c
	 c.add_extension ef.create_extension("authorityKeyIdentifier",
						"keyid:always,issuer:always")
	 c.add_extension ef.create_extension("nsComment",
						"Generated by OpenSSL for Ruby!")
	 c.sign(@@key, Digest::SHA1.new)
	 
	 @@cert=c
	 File.new("serv.cert","w") << @@cert.to_pem
      end
      
      class SSLSocket < OpenSSL::SSL::SSLSocket
	 
	 def initialize(s,cert,key)
	    @s=s
	    super
	 end
	 
	 def method_missing(name,*param)
	    @s.method(name).call *param
	 end
      end
      
   end
end
	 
	 
      
      
